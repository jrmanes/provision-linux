# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/{{ username }}/.oh-my-zsh"
export PATH=/opt/firefox:$PATH

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes

# THEMES
#ZSH_THEME="robbyrussell"
#ZSH_THEME="agnoster"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  docker
  docker-compose
  zsh-syntax-highlighting
  zsh-autosuggestions
  autojump
  dnf
  kubectl-autocomplete
)
source $ZSH/oh-my-zsh.sh

# # # # # # # # # # #
# User configuration
# # # # # # # # # # #

# export MANPATH="/usr/local/man:$MANPATH"

export PATH="${HOME}/.local/share/lua-language-server/bin/:${PATH}"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

# # # # # # # # # # #
# Alias
# # # # # # # # # # #
alias profile="vim ~/.zshrc && source ~/.zshrc"
alias rprofile="source ~/.zshrc"

# Golang
export GOVERSION=1.21.3
export GOROOT=/usr/local/go/go$GOVERSION/go/
export GOPATH=~/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# Tools
alias dev="cd /media/Data/Dev/"
alias devops="cd /media/Data/DevOps/"
alias o="nautilus . &"
alias open="nautilus . &"
alias m="make"
alias t="terraform"
alias vim="nvim"
alias v="nvim"
alias copy='xclip -sel clip'
alias c='xclip -sel clip'
alias pwdc='pwd | xclip -sel clip'
alias ls='lsd'
alias cat='bat'
alias catt='/bin/cat'
alias capi='clusterapi'

# Git
alias g="git"
alias gs="git status"
alias gc="git clone"
alias gfp="git fetch && git pull"
alias gch='git checkout'
alias gcd='git checkout dev && gfp'
alias gr='git remove -v'

# Linux
#alias gurl='git config --get remote.origin.url'
alias gourl='open $(git ls-remote --get-url)'
alias gw="git worktree"
alias gwl="git worktree list"

# Kubernetes
alias k='kubectl'
alias kd='kubectl describe'
alias kdp='kubectl describe pod'
alias kg='kubectl get'
alias kgno='kubectl get no'
alias kgn='kubectl get ns'
alias kdelp='kubectl delete pod'
alias kga='kubectl get all'
alias kl='kubectl logs -f'
alias kgall='k get deploy,sts,job,ds,rs,po,pvc,rc,svc,cm,secrets'
alias kgqns='for i in $(kubectl get ns | cut -d" " -f1 | tail +2 );do echo -e "\e[94mNS:\e[24m \e[32m$i\e[39m" && k describe quota -n $i; done'
alias kgpw='kubectl get pods --all-namespaces -w'
alias wkgno='watch kubectl get no -o wide'
alias kpns='kubectl get pods -A --no-headers -o=custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace,STATUS:.status.phase'
alias kke='kubectl kustomize --enable-helm'
alias kdpvr='kubectl get pv -A | grep Released | cut -d' ' -f1 | xargs -I {} kubectl delete pv {}'

# Docker
#alias dkall="""

function dkall(){
  docker ps -a |cut -d' ' -f3 | xargs -I {} docker stop {}
  docker ps -a |cut -d' ' -f1 | xargs -I {} docker rm {}
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -a -q) --force
  docker rmi $(docker image ls) && docker rm $(docker ps -a -f status=exited -q)
  docker volume ls | cut -d ' ' -f6 |xargs -I {} docker volume rm {}
  docker system prune -a -f
}

#
alias d="docker"
alias dps="docker ps"
alias wdps="watch docker ps"
alias drm="docker stop $(docker ps -qa --no-trunc --filter "status=exited")"

# =============================================================================
# Stops and delete first container detect
function rmdo(){
	IDC=$(docker ps| tail -n +2 | cut -d' ' -f1) ;d stop $IDC ; d rm $IDC 
}
# Setup needed files for Terraform
function setup_tf(){
	touch main.tf variables.tf output.tf README.md
}
# Get pods in nodes
function pono(){
	 for i in $(kubectl get no --no-headers -o=custom-columns=NAME:.metadata.name); do 
		 echo -e "\e[0;37m\033[1m ---------- Node: \e[0;33m\033[1m $i  \e[0;37m\033[1m ----------\033[0m\e[0m \n"
		 kubectl describe no $i |grep Non -A 35 |grep -B 30 -m 1 "Allocated"|grep -v "Allocated"
		 echo "\n"
	done
}
# Shows the allocated resources in the nodes
function kallocated(){
for node in $(kubectl  get no --no-headers -o=custom-columns=NAME:.metadata.name); do 
	echo "------ NODE $node ----- \n"
	kubectl describe no $node |grep "Allocated" -A 9
done
}
# Shows the allocated resources in the nodes
function wkallocated(){
	while true; do 
		for node in $(kubectl  get no --no-headers -o=custom-columns=NAME:.metadata.name); do 
			echo "------ NODE $node ----- \n"
			kubectl describe no $node |grep "Allocated" -A 9
		done
	done
}
# Stop and delete container
function dsr(){
	docker stop $1
	docker rm $1
}
# Return the redis password decripted
function redis_pass(){
	kubectl get secret -n derive-service redis-secrets -o jsonpath='{.data.REDIS_PASS}'|base64 -d
}
######################
######################
######################

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# FZF config
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Extra functions and aliases
[ -f ~/.extra_alias ] && source ~/.extra_alias
[ -f ~/.extra_functions ] && source ~/.extra_functions

# GPG
# https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# in case of issues, try to restart it exeucting:
# gpgconf --kill gpg-agent
export GPG_TTY=$(tty)
